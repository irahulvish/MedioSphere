USE MEDICO_ORDERS;

-- QUERY 1
INSERT INTO USERS VALUE (1001,'bobsharma1','bobsharma@gmail.com','2002-05-01','15:06:01');

-- QUERY 2
SELECT USERNAME, EMAIL FROM USERS;

-- QUERY 3
UPDATE USERS SET EMAIL=USERID WHERE USERNAME='bobsharma1';

-- QUERY 4
-- SET SQL_SAFE_UPDATES=0;
DELETE FROM USERS WHERE USERNAME='bobsharma1';

-- QUERY 5
SELECT * FROM ORDERS WHERE STATUS='Completed';

-- QUERY 6
SELECT COUNT(PRODUCTID) AS TOTAL_PRODUCTS FROM PRODUCTS;

-- QUERY 7
SELECT * FROM ORDERS ORDER BY ORDERDATE DESC;

-- QUERY 8
SELECT * FROM PRODUCTS WHERE PRICE>80000;

-- QUERY 9
SELECT * FROM USERS WHERE DATEOFBIRTH>='2000-01-01';

-- QUEERY 10
ALTER TABLE USERS ADD COLUMN PHONE INT UNSIGNED CHECK(LENGTH(PHONE)=10);

-- QUERY 11
SELECT * FROM USERS WHERE USERNAME LIKE 'A%';

-- QUERY 12
SELECT * FROM PRODUCTS WHERE STOCK<20;

-- QUERY 13
SELECT SUM(AMOUNT) AS TOTAL_REVENUE_GENERATED FROM ORDERS;

-- QUERY 14
SELECT MIN(PRICE) AS MIN_PROD_PRICE FROM PRODUCTS;

-- QUERY 15
SELECT * FROM ORDERS WHERE DATEDIFF(CURRENT_DATE(), ORDERDATE)<=30;

-- QUERY 16
UPDATE PRODUCTS SET STOCK=0 WHERE PRODUCTID=100;

-- QUERY 17
DELETE FROM PRODUCTS WHERE CATEGORY='Levofloxacin';

-- QUERY 18
SELECT * FROM USERS ORDER BY CREATEDAT LIMIT 5;

-- QUERY 19
SELECT * FROM PRODUCTS ORDER BY PRICE DESC LIMIT 3;

-- QUERY 20
SELECT * FROM ORDERS WHERE AMOUNT BETWEEN 1000 AND 5000;

-- QUERY 21
SELECT CATEGORY, AVG(PRICE) AS AVG_PRICE FROM PRODUCTS GROUP BY CATEGORY;

-- QUERY 22
SELECT DISTINCT(CATEGORY) AS DISTINCT_CATEGORY FROM PRODUCTS;

-- QUERY 23
UPDATE ORDERS SET STATUS='Completed' WHERE STATUS='Pending';

-- QUERY 24
SELECT COUNT(ORDERID) FROM ORDERS WHERE USERID=905;

-- QUERY 25
SELECT MONTHNAME(DATEOFBIRTH) AS MONTH_NAME, COUNT(USERID) FROM USERS GROUP BY MONTH_NAME ORDER BY FIELD(MONTH_NAME, 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'); 

-- QUERY 26
SELECT * FROM USERS WHERE EMAIL LIKE '%@forbes.com';

-- QUERY 27
SELECT * FROM ORDERS WHERE ORDERDATE='2025-01-01';

-- QUERY 28
UPDATE PRODUCTS SET PRICE=(PRICE-(1/10)*PRICE) WHERE CATEGORY='Alcohol'; 

-- QUERY 29
DELETE FROM ORDERS WHERE AMOUNT<1500;

-- QUERY 30
SELECT USERID, USERNAME, FLOOR(DATEDIFF(CURRENT_DATE(), DATEOFBIRTH)/365) FROM USERS;

-- QUERY 31
SELECT USERID, ORDERID FROM ORDERS WHERE USERID IN (SELECT USERID FROM ORDERS GROUP BY USERID HAVING COUNT(ORDERID)>2);

-- QUERY 32
SELECT A.USERID, B.USERNAME, COUNT(A.ORDERID) AS NO_OF_ORDERS FROM ORDERS AS A JOIN USERS AS B ON A.USERID=B.USERID GROUP BY USERID HAVING NO_OF_ORDERS>2 ORDER BY A.USERID;

-- QUERY 33
SELECT NAME, PRICE AS HIGHEST_VALUED_PROD FROM PRODUCTS ORDER BY PRICE DESC LIMIT 1;

-- QUERY 34
INSERT INTO PRODUCTS VALUES (100, "DOLO", "Paracetamol", 150, 50);

-- QUERY 35
SELECT * FROM PRODUCTS WHERE STOCK>4500 ORDER BY PRODUCTID;

-- QUERY 36
SELECT A.USERID, B.USERNAME, B.EMAIL, A.ORDERID, A.STATUS FROM ORDERS AS A JOIN USERS AS B ON A.USERID=B.USERID ORDER BY A.USERID;

-- QUERY 37
CREATE INDEX IDX ON USERS(EMAIL);

-- QUERY 38
SELECT * FROM PRODUCTS ORDER BY CATEGORY,PRICE;

-- QUERY 39
ALTER TABLE PRODUCTS MODIFY STOCK INT DEFAULT 20;
-- INSERT INTO PRODUCTS(PRODUCTID, NAME, CATEGORY, PRICE) VALUES (101, "NORFLOX","Azithromycin",500);
-- SELECT * FROM PRODUCTS WHERE PRODUCTID=101;

-- QUERY 40
SELECT * FROM PRODUCTS WHERE CATEGORY IN('Alcohol','Paracetamol');

-- QUERY 41
SELECT A.PRODUCTID, A.NAME, SUM(B.AMOUNT) AS TOTAL_REVENUE FROM PRODUCTS AS A JOIN ORDERS AS B ON A.PRODUCTID=B.PRODUCTID GROUP BY A.PRODUCTID ORDER BY A.PRODUCTID; 

-- QUERY 42
ALTER TABLE PRODUCTS ADD COLUMN DISCOUNT_PERCENT DECIMAL(10,2) UNSIGNED DEFAULT 5.00;

-- QUERY 43
SELECT ORDERID, STATUS FROM ORDERS;

-- QUERY 44
SELECT * FROM USERS ORDER BY CREATEDAT DESC LIMIT 1;

-- QUERY 45
SELECT PRICE FROM PRODUCTS WHERE PRICE NOT IN (SELECT MAX(PRICE) FROM PRODUCTS) ORDER BY PRICE DESC LIMIT 1;

-- QUERY 46
SELECT COUNT(ORDERID) AS ORDERS_IN_LAST_WEEK FROM ORDERS WHERE DATEDIFF(CURRENT_DATE,ORDERDATE)<=7;

-- QUERY 47
SELECT * FROM USERS AS A LEFT JOIN ORDERS AS B ON A.USERID=B.USERID WHERE B.USERID IS NULL;

-- QUERY 48
SELECT AVG(AMOUNT) AS AVG_ORDER_AMOUNT FROM ORDERS;
-- If it was asked to calculate avg for each user:  
-- SELECT USERID, AVG(AMOUNT) AS AVG_ORDER_AMOUNT FROM ORDERS GROUP BY USERID;

-- QUESTION 49
INSERT INTO PRODUCTS VALUES(102,"Ranbaxy","Volini",200,200,20);
SELECT B.PRODUCTID, B.NAME FROM ORDERS AS A RIGHT JOIN PRODUCTS AS B ON A.PRODUCTID=B.PRODUCTID WHERE A.PRODUCTID IS NULL;

-- QUERY 50
UPDATE ORDERS SET STATUS='CANCELLED' WHERE ORDERID=10;

-- QUERY 51
SELECT A.USERID, A.USERNAME, SUM(B.USERID) AS TOTAL_ORDERS FROM USERS AS A JOIN ORDERS AS B ON A.USERID=B.USERID GROUP BY A.USERID;

-- QUERY 52 
SELECT A.USERID, A.USERNAME, SUM(B.AMOUNT) AS TOTAL_SPENT FROM USERS AS A JOIN ORDERS AS B ON A.USERID=B.USERID GROUP BY A.USERID ORDER BY TOTAL_SPENT DESC LIMIT 5;

-- QUERY 53
SELECT STATUS, SUM(AMOUNT) AS TOTAL_REVENUE FROM ORDERS GROUP BY STATUS ORDER BY TOTAL_REVENUE DESC;

-- QUERY 54
CREATE VIEW T_VIEW AS SELECT A.USERNAME, COUNT(B.ORDERID) AS TOTAL_ORDERS FROM USERS AS A JOIN ORDERS AS B ON A.USERID=B.USERID GROUP BY A.USERNAME ORDER BY A.USERNAME;

-- QUERY 55
ALTER TABLE ORDERS ADD FOREIGN KEY(PRODUCTID) REFERENCES PRODUCTS(PRODUCTID);

-- QUERY 56
SELECT B.PRODUCTID, B.NAME , COUNT(DISTINCT(A.ORDERID)) AS NUMBER_OF_ORDERS FROM ORDERS AS A JOIN PRODUCTS AS B ON A.PRODUCTID=B.PRODUCTID GROUP BY  B.PRODUCTID ORDER BY NUMBER_OF_ORDERS DESC LIMIT 1;

-- QUERY 57


-- QUERY 58
SELECT MONTHNAME(DATEOFBIRTH) AS MONTH_OF_BIRTH, USERID, USERNAME FROM USERS ORDER BY FIELD(MONTH_OF_BIRTH, 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),USERID;

-- QUERY 59


-- QUERY 60
SELECT A.USERID, A.USERNAME, SUM(B.AMOUNT) AS TOTAL_SPENT FROM USERS AS A JOIN ORDERS AS B ON A.USERID=B.USERID GROUP BY A.USERID HAVING TOTAL_SPENT>200000 ORDER BY TOTAL_SPENT DESC;

-- QUERY 61
SELECT * FROM PRODUCTS WHERE CATEGORY='PARACETAMOL';

-- QUERY 62


-- QUERY 63


-- QUERY 64
SELECT ORDERDATE, SUM(ORDERID) FROM ORDERS WHERE DATEDIFF(CURRENT_DATE(),ORDERDATE)<=7 GROUP BY ORDERDATE ORDER BY ORDERDATE DESC;

-- QUERY 65
SELECT AVG(STOCK) AS AVERAGE_STOCK FROM PRODUCTS;

-- QUERY 66
SELECT MONTH(DATEOFBIRTH) AS MONTHOFBIRTH, USERID, USERNAME FROM USERS ORDER BY MONTHOFBIRTH;

-- QUERY 67
SELECT B.CATEGORY, SUM(A.AMOUNT) AS REVENUE FROM ORDERS AS A JOIN PRODUCTS AS B ON A.PRODUCTID=B.PRODUCTID GROUP BY B.CATEGORY HAVING REVENUE>800000;

-- QUERY 68
SELECT * FROM ORDERS GROUP BY STATUS;

-- QUERY 69
SELECT PRODUCTID, NAME FROM PRODUCTS WHERE STOCK<(SELECT AVG(STOCK) FROM PRODUCTS);

-- QUERY 70
SELECT A.USERID, B.USERNAME, SUM(A.AMOUNT) AS TOTAL_REVENUE FROM ORDERS AS A JOIN USERS AS B ON A.USERID=B.USERID GROUP BY A.USERID ORDER BY SUM(A.AMOUNT) DESC;

-- QUERY 71
SELECT A.USERID, B.USERNAME, COUNT(A.ORDERID) AS MAX_ORDERS FROM ORDERS AS A JOIN USERS AS B ON A.USERID=B.USERID GROUP BY A.USERID ORDER BY MAX_ORDERS DESC LIMIT 1; 

-- QUERY 72
SELECT A.PRODUCTID, A.NAME, COUNT(B.PRODUCTID) AS TOTALORDERS FROM PRODUCTS AS A JOIN ORDERS AS B ON A.PRODUCTID=B.PRODUCTID GROUP BY A.PRODUCTID ORDER BY TOTALORDERS DESC;

-- QUERY 73
SELECT A.ORDERID AS HIGHEST_AMOUNT_ORDER, A.AMOUNT, B.USERID, B.USERNAME FROM ORDERS AS A JOIN USERS AS B ON A.USERID=B.USERID WHERE A.AMOUNT=(SELECT MAX(AMOUNT) FROM ORDERS);

-- QUERY 74
UPDATE ORDERS SET STATUS='CANCELLED' WHERE DATEDIFF(CURRENT_DATE(),ORDERDATE)>30;

-- QUERY 75
SELECT PRODUCTID, NAME, SUM(STOCK) FROM PRODUCTS GROUP BY PRODUCTID; 

-- QUERY 76
SELECT USERID FROM ORDERS WHERE DATEDIFF(CURRENT_DATE(),ORDERDATE)>180 ORDER BY USERID;

-- QUERY 77
SELECT * FROM PRODUCTS WHERE STOCK<20;

-- QUERY 78
SELECT A.CATEGORY AS CATEGORY, SUM(B.AMOUNT) AS SALE  FROM PRODUCTS AS A JOIN ORDERS AS B ON A.PRODUCTID=B.PRODUCTID GROUP BY CATEGORY ORDER BY SALE DESC LIMIT 3;

-- QUERY 79
SELECT USERID FROM ORDERS WHERE AMOUNT>(SELECT AVG(AMOUNT) FROM ORDERS);

-- QUERY 80
SELECT  MAX(AMOUNT)-MIN(AMOUNT) FROM ORDERS;

-- QUERY 81
SELECT DATE(ORDERDATE) AS O_DATE, AVG(AMOUNT) AS AVG_REVENUE FROM ORDERS WHERE DATEDIFF(CURRENT_DATE,ORDERDATE)<=30 GROUP BY O_DATE ORDER BY O_DATE DESC;

-- QUERY 82
SELECT USERID, SUM(AMOUNT) AS TOTALAMOUNT FROM ORDERS GROUP BY USERID ORDER BY TOTALAMOUNT DESC;

SELECT * FROM USERS;
SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;







